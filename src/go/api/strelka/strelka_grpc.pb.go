// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: strelka.proto

package strelka

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontendClient is the client API for Frontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendClient interface {
	ScanFile(ctx context.Context, opts ...grpc.CallOption) (Frontend_ScanFileClient, error)
	CompileYara(ctx context.Context, opts ...grpc.CallOption) (Frontend_CompileYaraClient, error)
	SyncYara(ctx context.Context, opts ...grpc.CallOption) (Frontend_SyncYaraClient, error)
	SyncYaraV2(ctx context.Context, opts ...grpc.CallOption) (Frontend_SyncYaraV2Client, error)
	ShouldUpdateYara(ctx context.Context, opts ...grpc.CallOption) (Frontend_ShouldUpdateYaraClient, error)
	GetYaraHash(ctx context.Context, opts ...grpc.CallOption) (Frontend_GetYaraHashClient, error)
}

type frontendClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendClient(cc grpc.ClientConnInterface) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) ScanFile(ctx context.Context, opts ...grpc.CallOption) (Frontend_ScanFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frontend_ServiceDesc.Streams[0], "/Frontend/ScanFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendScanFileClient{stream}
	return x, nil
}

type Frontend_ScanFileClient interface {
	Send(*ScanFileRequest) error
	Recv() (*ScanResponse, error)
	grpc.ClientStream
}

type frontendScanFileClient struct {
	grpc.ClientStream
}

func (x *frontendScanFileClient) Send(m *ScanFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendScanFileClient) Recv() (*ScanResponse, error) {
	m := new(ScanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendClient) CompileYara(ctx context.Context, opts ...grpc.CallOption) (Frontend_CompileYaraClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frontend_ServiceDesc.Streams[1], "/Frontend/CompileYara", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendCompileYaraClient{stream}
	return x, nil
}

type Frontend_CompileYaraClient interface {
	Send(*CompileYaraRequest) error
	Recv() (*CompileYaraResponse, error)
	grpc.ClientStream
}

type frontendCompileYaraClient struct {
	grpc.ClientStream
}

func (x *frontendCompileYaraClient) Send(m *CompileYaraRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendCompileYaraClient) Recv() (*CompileYaraResponse, error) {
	m := new(CompileYaraResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendClient) SyncYara(ctx context.Context, opts ...grpc.CallOption) (Frontend_SyncYaraClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frontend_ServiceDesc.Streams[2], "/Frontend/SyncYara", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendSyncYaraClient{stream}
	return x, nil
}

type Frontend_SyncYaraClient interface {
	Send(*SyncYaraRequest) error
	Recv() (*SyncYaraResponse, error)
	grpc.ClientStream
}

type frontendSyncYaraClient struct {
	grpc.ClientStream
}

func (x *frontendSyncYaraClient) Send(m *SyncYaraRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendSyncYaraClient) Recv() (*SyncYaraResponse, error) {
	m := new(SyncYaraResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendClient) SyncYaraV2(ctx context.Context, opts ...grpc.CallOption) (Frontend_SyncYaraV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Frontend_ServiceDesc.Streams[3], "/Frontend/SyncYara_v2", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendSyncYaraV2Client{stream}
	return x, nil
}

type Frontend_SyncYaraV2Client interface {
	Send(*SyncYaraRequestV2) error
	Recv() (*SyncYaraResponse, error)
	grpc.ClientStream
}

type frontendSyncYaraV2Client struct {
	grpc.ClientStream
}

func (x *frontendSyncYaraV2Client) Send(m *SyncYaraRequestV2) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendSyncYaraV2Client) Recv() (*SyncYaraResponse, error) {
	m := new(SyncYaraResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendClient) ShouldUpdateYara(ctx context.Context, opts ...grpc.CallOption) (Frontend_ShouldUpdateYaraClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frontend_ServiceDesc.Streams[4], "/Frontend/ShouldUpdateYara", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendShouldUpdateYaraClient{stream}
	return x, nil
}

type Frontend_ShouldUpdateYaraClient interface {
	Send(*ShouldUpdateYaraRequest) error
	Recv() (*ShouldUpdateYaraResponse, error)
	grpc.ClientStream
}

type frontendShouldUpdateYaraClient struct {
	grpc.ClientStream
}

func (x *frontendShouldUpdateYaraClient) Send(m *ShouldUpdateYaraRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendShouldUpdateYaraClient) Recv() (*ShouldUpdateYaraResponse, error) {
	m := new(ShouldUpdateYaraResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendClient) GetYaraHash(ctx context.Context, opts ...grpc.CallOption) (Frontend_GetYaraHashClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frontend_ServiceDesc.Streams[5], "/Frontend/GetYaraHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendGetYaraHashClient{stream}
	return x, nil
}

type Frontend_GetYaraHashClient interface {
	Send(*GetYaraHashRequest) error
	Recv() (*GetYaraHashResponse, error)
	grpc.ClientStream
}

type frontendGetYaraHashClient struct {
	grpc.ClientStream
}

func (x *frontendGetYaraHashClient) Send(m *GetYaraHashRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendGetYaraHashClient) Recv() (*GetYaraHashResponse, error) {
	m := new(GetYaraHashResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrontendServer is the server API for Frontend service.
// All implementations should embed UnimplementedFrontendServer
// for forward compatibility
type FrontendServer interface {
	ScanFile(Frontend_ScanFileServer) error
	CompileYara(Frontend_CompileYaraServer) error
	SyncYara(Frontend_SyncYaraServer) error
	SyncYaraV2(Frontend_SyncYaraV2Server) error
	ShouldUpdateYara(Frontend_ShouldUpdateYaraServer) error
	GetYaraHash(Frontend_GetYaraHashServer) error
}

// UnimplementedFrontendServer should be embedded to have forward compatible implementations.
type UnimplementedFrontendServer struct {
}

func (UnimplementedFrontendServer) ScanFile(Frontend_ScanFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ScanFile not implemented")
}
func (UnimplementedFrontendServer) CompileYara(Frontend_CompileYaraServer) error {
	return status.Errorf(codes.Unimplemented, "method CompileYara not implemented")
}
func (UnimplementedFrontendServer) SyncYara(Frontend_SyncYaraServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncYara not implemented")
}
func (UnimplementedFrontendServer) SyncYaraV2(Frontend_SyncYaraV2Server) error {
	return status.Errorf(codes.Unimplemented, "method SyncYaraV2 not implemented")
}
func (UnimplementedFrontendServer) ShouldUpdateYara(Frontend_ShouldUpdateYaraServer) error {
	return status.Errorf(codes.Unimplemented, "method ShouldUpdateYara not implemented")
}
func (UnimplementedFrontendServer) GetYaraHash(Frontend_GetYaraHashServer) error {
	return status.Errorf(codes.Unimplemented, "method GetYaraHash not implemented")
}

// UnsafeFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServer will
// result in compilation errors.
type UnsafeFrontendServer interface {
	mustEmbedUnimplementedFrontendServer()
}

func RegisterFrontendServer(s grpc.ServiceRegistrar, srv FrontendServer) {
	s.RegisterService(&Frontend_ServiceDesc, srv)
}

func _Frontend_ScanFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendServer).ScanFile(&frontendScanFileServer{stream})
}

type Frontend_ScanFileServer interface {
	Send(*ScanResponse) error
	Recv() (*ScanFileRequest, error)
	grpc.ServerStream
}

type frontendScanFileServer struct {
	grpc.ServerStream
}

func (x *frontendScanFileServer) Send(m *ScanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendScanFileServer) Recv() (*ScanFileRequest, error) {
	m := new(ScanFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Frontend_CompileYara_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendServer).CompileYara(&frontendCompileYaraServer{stream})
}

type Frontend_CompileYaraServer interface {
	Send(*CompileYaraResponse) error
	Recv() (*CompileYaraRequest, error)
	grpc.ServerStream
}

type frontendCompileYaraServer struct {
	grpc.ServerStream
}

func (x *frontendCompileYaraServer) Send(m *CompileYaraResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendCompileYaraServer) Recv() (*CompileYaraRequest, error) {
	m := new(CompileYaraRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Frontend_SyncYara_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendServer).SyncYara(&frontendSyncYaraServer{stream})
}

type Frontend_SyncYaraServer interface {
	Send(*SyncYaraResponse) error
	Recv() (*SyncYaraRequest, error)
	grpc.ServerStream
}

type frontendSyncYaraServer struct {
	grpc.ServerStream
}

func (x *frontendSyncYaraServer) Send(m *SyncYaraResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendSyncYaraServer) Recv() (*SyncYaraRequest, error) {
	m := new(SyncYaraRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Frontend_SyncYaraV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendServer).SyncYaraV2(&frontendSyncYaraV2Server{stream})
}

type Frontend_SyncYaraV2Server interface {
	Send(*SyncYaraResponse) error
	Recv() (*SyncYaraRequestV2, error)
	grpc.ServerStream
}

type frontendSyncYaraV2Server struct {
	grpc.ServerStream
}

func (x *frontendSyncYaraV2Server) Send(m *SyncYaraResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendSyncYaraV2Server) Recv() (*SyncYaraRequestV2, error) {
	m := new(SyncYaraRequestV2)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Frontend_ShouldUpdateYara_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendServer).ShouldUpdateYara(&frontendShouldUpdateYaraServer{stream})
}

type Frontend_ShouldUpdateYaraServer interface {
	Send(*ShouldUpdateYaraResponse) error
	Recv() (*ShouldUpdateYaraRequest, error)
	grpc.ServerStream
}

type frontendShouldUpdateYaraServer struct {
	grpc.ServerStream
}

func (x *frontendShouldUpdateYaraServer) Send(m *ShouldUpdateYaraResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendShouldUpdateYaraServer) Recv() (*ShouldUpdateYaraRequest, error) {
	m := new(ShouldUpdateYaraRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Frontend_GetYaraHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendServer).GetYaraHash(&frontendGetYaraHashServer{stream})
}

type Frontend_GetYaraHashServer interface {
	Send(*GetYaraHashResponse) error
	Recv() (*GetYaraHashRequest, error)
	grpc.ServerStream
}

type frontendGetYaraHashServer struct {
	grpc.ServerStream
}

func (x *frontendGetYaraHashServer) Send(m *GetYaraHashResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendGetYaraHashServer) Recv() (*GetYaraHashRequest, error) {
	m := new(GetYaraHashRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Frontend_ServiceDesc is the grpc.ServiceDesc for Frontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScanFile",
			Handler:       _Frontend_ScanFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CompileYara",
			Handler:       _Frontend_CompileYara_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncYara",
			Handler:       _Frontend_SyncYara_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncYara_v2",
			Handler:       _Frontend_SyncYaraV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ShouldUpdateYara",
			Handler:       _Frontend_ShouldUpdateYara_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetYaraHash",
			Handler:       _Frontend_GetYaraHash_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strelka.proto",
}
