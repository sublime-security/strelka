# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import strelka_pb2 as strelka__pb2


class FrontendStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScanFile = channel.stream_stream(
                '/Frontend/ScanFile',
                request_serializer=strelka__pb2.ScanFileRequest.SerializeToString,
                response_deserializer=strelka__pb2.ScanResponse.FromString,
                )
        self.SyncYara = channel.stream_stream(
                '/Frontend/SyncYara',
                request_serializer=strelka__pb2.SyncYaraRequest.SerializeToString,
                response_deserializer=strelka__pb2.SyncYaraResponse.FromString,
                )
        self.ShouldUpdateYara = channel.stream_stream(
                '/Frontend/ShouldUpdateYara',
                request_serializer=strelka__pb2.ShouldUpdateYaraRequest.SerializeToString,
                response_deserializer=strelka__pb2.ShouldUpdateYaraResponse.FromString,
                )


class FrontendServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ScanFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncYara(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShouldUpdateYara(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrontendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScanFile': grpc.stream_stream_rpc_method_handler(
                    servicer.ScanFile,
                    request_deserializer=strelka__pb2.ScanFileRequest.FromString,
                    response_serializer=strelka__pb2.ScanResponse.SerializeToString,
            ),
            'SyncYara': grpc.stream_stream_rpc_method_handler(
                    servicer.SyncYara,
                    request_deserializer=strelka__pb2.SyncYaraRequest.FromString,
                    response_serializer=strelka__pb2.SyncYaraResponse.SerializeToString,
            ),
            'ShouldUpdateYara': grpc.stream_stream_rpc_method_handler(
                    servicer.ShouldUpdateYara,
                    request_deserializer=strelka__pb2.ShouldUpdateYaraRequest.FromString,
                    response_serializer=strelka__pb2.ShouldUpdateYaraResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Frontend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Frontend(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ScanFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Frontend/ScanFile',
            strelka__pb2.ScanFileRequest.SerializeToString,
            strelka__pb2.ScanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncYara(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Frontend/SyncYara',
            strelka__pb2.SyncYaraRequest.SerializeToString,
            strelka__pb2.SyncYaraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShouldUpdateYara(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Frontend/ShouldUpdateYara',
            strelka__pb2.ShouldUpdateYaraRequest.SerializeToString,
            strelka__pb2.ShouldUpdateYaraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
